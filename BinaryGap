"""
A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.
For example, number 9 has binary representation 1001 and contains a binary gap of length 2.
The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3.
The number 20 has binary representation 10100 and contains one binary gap of length 1.
The number 15 has binary representation 1111 and has no binary gaps.
The number 32 has binary representation 100000 and has no binary gaps.

Write a function:
class Solution { public int solution(int N); }
that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.

For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5.
Given N = 32 the function should return 0, because N has binary representation '100000' and thus no binary gaps.

Write an efficient algorithm for the following assumptions:
N is an integer within the range [1..2,147,483,647].
"""

import re

def solution(N):
    binary = str(bin(N).split('b')[1])
    one_index = [m.start() for m in re.finditer('1', binary)]

    result = 0
    for i in range(len(one_index) - 1):
        result = max(result, one_index[i+1] - one_index[i] - 1) 
    return result


# Re 파이썬 정규식 쓰지 않은 방법

def solution(N):
    # binary gap은 N을 2진수로 표현하고 연속적인 0이 나타내는 값을 카운트한다.
    # 단 문제는 1로 감싸줘 있다는 것을 확인해야 한다.
    
    # [1] 2진수로 표현하자. bin()
    binary = bin(N)
    str_binary = binary [2:]
    #print(str_binary) # 10000010001
    
    # [2] index와 value를 확인해보자. 1이 어느 인덱스에 있는 지 확인한다.
    one_index = []
    for index, value in enumerate(binary):
        if value == '1':
            one_index.append(index)
    # print(one_index) // [0, 6, 10]
    
    # [4] 1의 인덱스를 기반으로 앞의 값과 뒤의 값을 빼고 1을 더하여 계산한다.
    binary_gap = []
    binary_gap.append(0)
    for idx in range(len(one_index)-1):
        binary_gap.append(one_index[idx+1] - one_index[idx] - 1)
    
    return max(binary_gap)
